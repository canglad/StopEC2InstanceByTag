AWSTemplateFormatVersion: "2010-09-09"
Description: A stack for creating a Lambda function that automatically stops an EC2 instance

Resources:
  LambdaStopEC2ByTagRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaStopEC2ByTagRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole

  LambdaStopEC2ByTagPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaStopEC2Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - ec2:DescribeInstances
          - ec2:StopInstances
          Effect: Allow
          Resource: "*"
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: "*"
      Roles: [!Ref LambdaStopEC2ByTagRole]
  
  LambdaStopEC2ByTag:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaStopEC2ByTag
      Description: Stop EC2 instances with tag AutoOff equals True
      Handler: index.lambda_handler
      Role: !GetAtt LambdaStopEC2ByTagRole.Arn
      Code:
        ZipFile: !Sub |
            # Source code copied from https://gist.github.com/mlapida/1917b5db84b76b1d1d55, on Aug 7, 2018
            # Copyright (c) 2016 Michael Lapidakis
            # Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
            # 
            # The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
            # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

            import boto3
            import logging

            #setup simple logging for INFO
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            #define the connection
            ec2 = boto3.resource('ec2')

            def lambda_handler(event, context):
                # Use the filter() method of the instances collection to retrieve
                # all running EC2 instances.
                filters = [{
                        'Name': 'tag:AutoOff',
                        'Values': ['True']
                    },
                    {
                        'Name': 'instance-state-name', 
                        'Values': ['running']
                    }
                ]
                
                #filter the instances
                instances = ec2.instances.filter(Filters=filters)

                #locate all running instances
                RunningInstances = [instance.id for instance in instances]
                
                #print the instances for logging purposes
                #print RunningInstances 
                
                #make sure there are actually instances to shut down. 
                if len(RunningInstances) > 0:
                    #perform the shutdown
                    shuttingDown = ec2.instances.filter(InstanceIds=RunningInstances).stop()
                    print shuttingDown
                else:
                    print "Nothing to see here"
      Runtime: python2.7

  StopEC2InstanceByTagSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: StopEC2InstanceByTagSchedule
      Description: "Run Lambda Function LambdaStopEC2ByTag by schedule to stop EC2 instances"
      ScheduleExpression: "cron(0 23 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaStopEC2ByTag.Arn
          Id: "TargetLambdaFunctionStopEC2InstanceByTag"
          
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt LambdaStopEC2ByTag.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StopEC2InstanceByTagSchedule.Arn
        